package blizzard

import (
	"bytes"
	"html/template"
	"io"
	"net/http"
)

type SnapshotRoute struct {
	Path          string
	Version       int
	Process       *Process
	Requests      int64
	TotalRequests uint64
	Written       uint64
}

type Snapshot struct {
	Execs  []*Executable
	Procs  []*Process
	Routes []*SnapshotRoute
}

type TemplateResponse struct {
	tpl *template.Template
	err error
}

func (m *Master) serveSnapshot(resp http.ResponseWriter, req *http.Request) {
	tplret := make(chan TemplateResponse)
	m.templateCh <- tplret
	tplresp := <-tplret
	if tplresp.err != nil {
		resp.WriteHeader(500)
		resp.Write([]byte(tplresp.err.Error()))
		return
	}
	ret := make(chan *Snapshot)
	m.snapshotCh <- ret
	snapshot := <-ret
	var generated bytes.Buffer
	err := tplresp.tpl.Execute(&generated, snapshot)
	if err != nil {
		resp.WriteHeader(500)
		resp.Write([]byte(err.Error()))
		return
	}
	io.Copy(resp, &generated)
}

func (m *Master) snapshot() *Snapshot {
	s := &Snapshot{}
	for _, e := range m.execs {
		s.Execs = append(s.Execs, e)
	}
	for _, i := range m.procs {
		s.Procs = append(s.Procs, i)
	}
	for v, router := range m.routers {
		flat := router.snapshot()
		for _, r := range flat {
			r.Version = v
		}
		s.Routes = append(s.Routes, flat...)
	}
	return s
}
